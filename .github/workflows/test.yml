name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.12, 3.13]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb chromium-browser
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.cache/playwright
        key: ${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-asyncio pytest-xvfb pytest-timeout
        playwright install --with-deps chromium
    
    - name: Run unit tests (basic functionality)
      run: |
        xvfb-run -a pytest tests/ \
          -k "not (docker or memory or stress)" \
          --maxfail=5 \
          --timeout=300 \
          --tb=short \
          -v
      continue-on-error: true

  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb chromium-browser
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-asyncio pytest-xvfb pytest-timeout
        playwright install --with-deps chromium
    
    - name: Run browser integration tests
      run: |
        xvfb-run -a pytest tests/browser/ tests/async/ \
          --maxfail=10 \
          --timeout=600 \
          --tb=short \
          -v
      env:
        CRAWL4AI_MODE: api
      continue-on-error: true

  docker-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-asyncio pytest-timeout
    
    - name: Run Docker tests
      run: |
        pytest tests/docker/ \
          --maxfail=5 \
          --timeout=900 \
          --tb=short \
          -v
      continue-on-error: true

  mcp-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-asyncio pytest-timeout
    
    - name: Run MCP tests
      run: |
        pytest tests/mcp/ \
          --maxfail=5 \
          --timeout=300 \
          --tb=short \
          -v
      continue-on-error: true

  lint-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install ruff
    
    - name: Run linting (informational)
      run: |
        echo "Running ruff check (informational only)..."
        ruff check . --output-format=github --exit-zero || true
        echo "Linting complete - see annotations above for any issues"
      continue-on-error: true

  summary:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, docker-tests, mcp-tests, lint-check]
    if: always()
    
    steps:
    - name: Test Summary
      run: |
        echo "ðŸ§ª Test Suite Complete!"
        echo "All test jobs have finished (some may have had issues)"
        echo "This is the first CI run - expect some failures as we tune the configuration"
        echo ""
        echo "Next steps:"
        echo "- Review failed tests and adjust configuration"
        echo "- Add missing test dependencies"
        echo "- Fix linting issues gradually"
        echo "- Optimize test performance"